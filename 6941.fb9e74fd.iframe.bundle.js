"use strict";(globalThis.webpackChunkgutenberg=globalThis.webpackChunkgutenberg||[]).push([[6941],{"./packages/components/src/surface/hook.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{v:()=>useSurface});var react=__webpack_require__("./node_modules/react/index.js"),use_context_system=__webpack_require__("./packages/components/src/context/use-context-system.js"),emotion_react_browser_esm=__webpack_require__("./node_modules/@emotion/react/dist/emotion-react.browser.esm.js"),config_values=__webpack_require__("./packages/components/src/utils/config-values.js"),colors_values=__webpack_require__("./packages/components/src/utils/colors-values.js");const Surface=(0,emotion_react_browser_esm.iv)("background-color:",config_values.Z.surfaceColor,";color:",colors_values.D.gray[900],";position:relative;","");config_values.Z.surfaceBackgroundColor;function getBorders({borderBottom,borderLeft,borderRight,borderTop}){const borderStyle=`1px solid ${config_values.Z.surfaceBorderColor}`;return(0,emotion_react_browser_esm.iv)({borderBottom:borderBottom?borderStyle:void 0,borderLeft:borderLeft?borderStyle:void 0,borderRight:borderRight?borderStyle:void 0,borderTop:borderTop?borderStyle:void 0},"","")}const primary=(0,emotion_react_browser_esm.iv)("",""),secondary=(0,emotion_react_browser_esm.iv)("background:",config_values.Z.surfaceBackgroundTintColor,";",""),tertiary=(0,emotion_react_browser_esm.iv)("background:",config_values.Z.surfaceBackgroundTertiaryColor,";",""),customBackgroundSize=surfaceBackgroundSize=>[surfaceBackgroundSize,surfaceBackgroundSize].join(" "),dottedBackground1=surfaceBackgroundSizeDotted=>["90deg",[config_values.Z.surfaceBackgroundColor,surfaceBackgroundSizeDotted].join(" "),"transparent 1%"].join(","),dottedBackground2=surfaceBackgroundSizeDotted=>[[config_values.Z.surfaceBackgroundColor,surfaceBackgroundSizeDotted].join(" "),"transparent 1%"].join(","),getDotted=(surfaceBackgroundSize,surfaceBackgroundSizeDotted)=>(0,emotion_react_browser_esm.iv)("background:",(surfaceBackgroundSizeDotted=>[`linear-gradient( ${dottedBackground1(surfaceBackgroundSizeDotted)} ) center`,`linear-gradient( ${dottedBackground2(surfaceBackgroundSizeDotted)} ) center`,config_values.Z.surfaceBorderBoldColor].join(","))(surfaceBackgroundSizeDotted),";background-size:",customBackgroundSize(surfaceBackgroundSize),";",""),gridBackgroundCombined=[`linear-gradient( ${[`${config_values.Z.surfaceBorderSubtleColor} 1px`,"transparent 1px"].join(",")} )`,`linear-gradient( ${["90deg",`${config_values.Z.surfaceBorderSubtleColor} 1px`,"transparent 1px"].join(",")} )`].join(","),getVariant=(variant,surfaceBackgroundSize,surfaceBackgroundSizeDotted)=>{switch(variant){case"dotted":return getDotted(surfaceBackgroundSize,surfaceBackgroundSizeDotted);case"grid":return(surfaceBackgroundSize=>(0,emotion_react_browser_esm.iv)("background:",config_values.Z.surfaceBackgroundColor,";background-image:",gridBackgroundCombined,";background-size:",customBackgroundSize(surfaceBackgroundSize),";",""))(surfaceBackgroundSize);case"primary":return primary;case"secondary":return secondary;case"tertiary":return tertiary}};var use_cx=__webpack_require__("./packages/components/src/utils/hooks/use-cx.ts");function useSurface(props){const{backgroundSize=12,borderBottom=!1,borderLeft=!1,borderRight=!1,borderTop=!1,className,variant="primary",...otherProps}=(0,use_context_system.y)(props,"Surface"),cx=(0,use_cx.I)();return{...otherProps,className:(0,react.useMemo)((()=>{const sx={borders:getBorders({borderBottom,borderLeft,borderRight,borderTop})};return cx(Surface,sx.borders,getVariant(variant,`${backgroundSize}px`,backgroundSize-1+"px"),className)}),[backgroundSize,borderBottom,borderLeft,borderRight,borderTop,className,cx,variant])}}},"./packages/components/src/text/component.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__,x:()=>Text});var _context__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/components/src/context/context-connect.ts"),_view__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/components/src/view/component.tsx"),_hook__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/components/src/text/hook.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js");function UnconnectedText(props,forwardedRef){const textProps=(0,_hook__WEBPACK_IMPORTED_MODULE_1__.Z)(props);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_view__WEBPACK_IMPORTED_MODULE_2__.Z,{as:"span",...textProps,ref:forwardedRef})}UnconnectedText.displayName="UnconnectedText";const Text=(0,_context__WEBPACK_IMPORTED_MODULE_3__.Iq)(UnconnectedText,"Text"),__WEBPACK_DEFAULT_EXPORT__=Text;try{Text.displayName="Text",Text.__docgenInfo={description:"`Text` is a core component that renders text in the library, using the\nlibrary's typography system.\n\n`Text` can be used to render any text-content, like an HTML `p` or `span`.",displayName:"Text",props:{align:{defaultValue:null,description:"Adjusts the text alignment.",name:"align",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"inherit"'},{value:'"end"'},{value:'"start"'},{value:'"initial"'},{value:'"left"'},{value:'"right"'},{value:'"justify"'},{value:'"-moz-initial"'},{value:'"revert"'},{value:'"revert-layer"'},{value:'"unset"'},{value:'"match-parent"'}]}},adjustLineHeightForInnerControls:{defaultValue:null,description:"Automatically calculate the appropriate line-height value for contents that render text and Control elements (e.g. `TextInput`).",name:"adjustLineHeightForInnerControls",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"large"'},{value:'"medium"'},{value:'"xSmall"'}]}},color:{defaultValue:null,description:"Adjusts the text color.",name:"color",required:!1,type:{name:"Color"}},display:{defaultValue:null,description:"Adjusts the CSS display.",name:"display",required:!1,type:{name:"Display"}},isDestructive:{defaultValue:{value:"false"},description:"Renders a destructive color.",name:"isDestructive",required:!1,type:{name:"boolean"}},highlightEscape:{defaultValue:{value:"false"},description:"Escape characters in `highlightWords` which are meaningful in regular expressions.",name:"highlightEscape",required:!1,type:{name:"boolean"}},highlightCaseSensitive:{defaultValue:{value:"false"},description:"Determines if `highlightWords` should be case sensitive.",name:"highlightCaseSensitive",required:!1,type:{name:"boolean"}},highlightSanitize:{defaultValue:null,description:"Array of search words. String search terms are automatically cast to RegExps unless `highlightEscape` is true.",name:"highlightSanitize",required:!1,type:{name:"(text: string) => string"}},isBlock:{defaultValue:{value:"false"},description:"Sets `Text` to have `display: block`. Note: text truncation only works\nwhen `isBlock` is `false`.",name:"isBlock",required:!1,type:{name:"boolean"}},lineHeight:{defaultValue:null,description:"Adjusts all text line-height based on the typography system.",name:"lineHeight",required:!1,type:{name:"LineHeight<string | number>"}},optimizeReadabilityFor:{defaultValue:null,description:"The `Text` color can be adapted to a background color for optimal readability. `optimizeReadabilityFor` can accept CSS variables, in addition to standard CSS color values (e.g. Hex, RGB, HSL, etc...).",name:"optimizeReadabilityFor",required:!1,type:{name:"Color"}},size:{defaultValue:null,description:"Adjusts text size based on the typography system. `Text` can render a wide range of font sizes, which are automatically calculated and adapted to the typography system. The `size` value can be a system preset, a `number`, or a custom unit value (`string`) such as `30em`.",name:"size",required:!1,type:{name:"string | number | (string & {})"}},truncate:{defaultValue:{value:"false"},description:"Enables text truncation. When `truncate` is set, we are able to truncate the long text in a variety of ways. Note: text truncation won't work if the `isBlock` property is set to `true`",name:"truncate",required:!1,type:{name:"boolean"}},upperCase:{defaultValue:{value:"false"},description:"Uppercases the text content.",name:"upperCase",required:!1,type:{name:"boolean"}},variant:{defaultValue:null,description:"Adjusts style variation of the text.",name:"variant",required:!1,type:{name:'"muted"'}},weight:{defaultValue:{value:"'normal'"},description:"Adjusts font-weight of the text.",name:"weight",required:!1,type:{name:"FontWeight | TextWeight"}},letterSpacing:{defaultValue:null,description:"Adjusts letter-spacing of the text.",name:"letterSpacing",required:!1,type:{name:"LetterSpacing<string | number>"}},highlightWords:{defaultValue:null,description:"Letters or words within `Text` can be highlighted using `highlightWords`.",name:"highlightWords",required:!1,type:{name:"string[]"}},ellipsis:{defaultValue:{value:"'â€¦'"},description:"The ellipsis string when truncating the text by the `limit` prop's value.",name:"ellipsis",required:!1,type:{name:"string"}},ellipsizeMode:{defaultValue:{value:"'auto'"},description:"Determines where to truncate.  For example, we can truncate text right in\nthe middle. To do this, we need to set `ellipsizeMode` to `middle` and a\ntext `limit`.\n\n* `auto`: Trims content at the end automatically without a `limit`.\n* `head`: Trims content at the beginning. Requires a `limit`.\n* `middle`: Trims content in the middle. Requires a `limit`.\n* `tail`: Trims content at the end. Requires a `limit`.",name:"ellipsizeMode",required:!1,type:{name:"enum",value:[{value:'"head"'},{value:'"none"'},{value:'"auto"'},{value:'"middle"'},{value:'"tail"'}]}},limit:{defaultValue:{value:"0"},description:"Determines the max number of characters to be displayed before the rest\nof the text gets truncated. Requires `ellipsizeMode` to assume values\ndifferent from `auto` and `none`.",name:"limit",required:!1,type:{name:"number"}},numberOfLines:{defaultValue:{value:"0"},description:"Clamps the text content to the specified `numberOfLines`, adding an\nellipsis at the end. Note: this feature ignores the value of the\n`ellipsis` prop and always displays the default `â€¦` ellipsis.",name:"numberOfLines",required:!1,type:{name:"number"}},children:{defaultValue:null,description:"The children elements.\n\nNote: text truncation will be attempted only if the `children` are either\nof type `string` or `number`. In any other scenarios, the component will\nnot attempt to truncate the text, and will pass through the `children`.",name:"children",required:!0,type:{name:"ReactNode"}},as:{defaultValue:null,description:"The HTML element or React component to render the component as.",name:"as",required:!1,type:{name:'"symbol" | "object" | "select" | "a" | "abbr" | "address" | "area" | "article" | "aside" | "audio" | "b" | "base" | "bdi" | "bdo" | "big" | "blockquote" | "body" | "br" | "button" | ... 516 more ... | ("view" & FunctionComponent<...>)'}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/components/src/text/component.tsx#Text"]={docgenInfo:Text.__docgenInfo,name:"Text",path:"packages/components/src/text/component.tsx#Text"})}catch(__react_docgen_typescript_loader_error){}}}]);